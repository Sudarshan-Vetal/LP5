#include<iostream>
#include<vector>
#include<omp.h>
#include<ctime>
#include<algorithm>
using namespace std;

void merge(vector<int>& arr, int left, int mid, int right)
{
    int n1 = mid - left + 1;
    int n2 = right - mid;

    vector<int> L(n1),R(n2);

    for(int i=0;i<n1;i++)
    {
        L[i]=arr[left+i];
    }
    for(int j=0;j<n2;j++)
    {
        R[j]=arr[mid+1+j];
    }

    int i=0,j=0,k=left;

    while(i<n1 && j<n2)
    {
        if(L[i]<=R[j])
        {
            arr[k]=L[i];
            i++;
        }
        else{
            arr[k]=R[j];
            j++;
        }
        k++;
    }

    while(i<n1)
    {
        arr[k]=L[i];
        i++;
        k++;
    }

    while(j<n2)
    {
        arr[k]=R[j];
        j++;
        k++;
    }

}

void mergesortsequential(vector<int>& arr, int left, int right)
{
    if(left>=right)
    {
        return;
    }

    int mid = left + (right-left)/2;
    mergesortsequential(arr,left,mid);
    mergesortsequential(arr,mid+1,right);
    merge(arr,left,mid,right);
}


void mergesortparallel(vector<int>& arr, int left, int right)
{
    if(left>=right)
    {
        return;
    }
    int mid = left + (right-left)/2;
    #pragma omp parallel sections
    {
        #pragma omp section
        {
            mergesortparallel(arr,left,mid);
        }
        #pragma omp section
        {
            mergesortparallel(arr,mid+1,right);
        }
    }
    merge(arr,left,mid,right);
}

int main() {
    int size;
    cout << "Enter the number of elements: ";
    cin >> size;

    vector<int> data(size);

    cout << "Enter the elements:\n";
    for (int i = 0; i < size; i++) {
        cin >> data[i];
    }

    cout << "\nInput data:\n";
    for (int i = 0; i < size; i++) {
        cout << data[i] << " ";
    }
    cout << endl;

    vector<int> sequentialData = data;
    vector<int> parallelData = data;

    clock_t startSeq = clock();
    mergesortsequential(sequentialData, 0, size - 1);
    clock_t endSeq = clock();
    double seqTime = double(endSeq - startSeq) / CLOCKS_PER_SEC;

    clock_t startPar = clock();
    mergesortparallel(parallelData, 0, size - 1);
    clock_t endPar = clock();
    double parTime = double(endPar - startPar) / CLOCKS_PER_SEC;

    bool sortedCorrectly = is_sorted(sequentialData.begin(), sequentialData.end());

    cout << "\nSorted data (sequential):\n";
    for (int i = 0; i < size; i++) {
        cout << sequentialData[i] << " ";
    }
    cout << endl;

    cout << "\nSorted data (parallel):\n";
    for (int i = 0; i < size; i++) {
        cout << parallelData[i] << " ";
    }
    cout << endl;

    cout << "\nSequential Merge Sort Time: " << seqTime << " seconds\n";
    cout << "Parallel Merge Sort Time: " << parTime << " seconds\n";
    cout << "Sorting Correctly: " << (sortedCorrectly ? "Yes" : "No") << endl;

    return 0;
}