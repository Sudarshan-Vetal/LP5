import numpy as np
import pandas as pd

import tensorflow as tf

import matplotlib.pyplot as plt
%matplotlib inline

from sklearn.preprocessing import MinMaxScaler
from sklearn.compose import make_column_transformer
from sklearn.model_selection import train_test_split



(X_train, y_train),(X_test, y_test) = tf.keras.datasets.boston_housing.load_data(
    path="boston_housing_npz",
    test_split=0.2,
    seed=42
)





df = pd.read_csv("HousingData.csv")
df.head()
df.shape
df.size
df.info()
df.describe()
df.isnull().sum()
df = df.dropna()
df.isnull().sum()
X = df.iloc[:,:-1]
y = df.iloc[:,-1]

X_train, X_test, y_train, y_test = train_test_split(X,y,random_state=42, test_size=0.2)

ct = make_column_transformer((MinMaxScaler(),[0,1,2,3,4,5,6,7,8,9,10,11,12]))

X_train = ct.fit_transform(X_train).astype('float32')
X_test = ct.transform(X_test).astype('float32')
y_train = y_train.astype('float32')
y_test = y_test.astype('float32')

tf.random.set_seed(42)

model = tf.keras.Sequential([
    tf.keras.layers.Dense(units=10,input_shape=(X_train.shape[1],),activation='relu'),
    tf.keras.layers.Dense(units=100, activation='relu'),
    tf.keras.layers.Dense(units=1, name='Prediction')
])

model.compile(
    loss = tf.keras.losses.mean_squared_error,
    optimizer = tf.keras.optimizers.RMSprop(learning_rate=0.01),
    metrics=['mse']
)

model.summary()

history = model.fit(
    X_train, y_train,
    batch_size=32,
    epochs=50,
    validation_split=0.1
)

pd.DataFrame(history.history).plot(figsize=(6,4),xlabel="Epochs",ylabel="Loss")
plt.plot()

y_pred = model.predict(X_test)

y_pred[0]

from sklearn.metrics import mean_squared_error, mean_absolute_error

mse = mean_squared_error(y_test, y_pred)
mse

mae = mean_absolute_error(y_test,y_pred)
mae

rmse = np.sqrt(mse)
rmse

y_test_np = y_test.to_numpy()

sorted_indices = np.argsort(y_test_np)

y_test_sorted = y_test_np[sorted_indices]
y_pred_sorted = y_pred[sorted_indices]

plt.plot(y_test_sorted, color='blue',label='Actual')
plt.plot(y_pred_sorted, color='red',label='Predicted')
plt.scatter(range(len(y_test_np)), y_test_sorted, color='blue')
plt.scatter(range(len(y_test_np)), y_pred_sorted,color='red')
plt.legend()
plt.xlabel('Index')
plt.ylabel('Values')
plt.title('Actual vs Predicted Values')
plt.show()