#include<iostream>
#include<omp.h>
using namespace std;

int minVal(int arr[], int n)
{
    int minVal = arr[0];
    #pragma omp parallel for reduction(min: minVal)
    {
        for(int i=0;i<n;i++)
        {
            if(arr[i]<minVal)
            {
                minVal = arr[i];
            }
        }
    }
    return minVal;
}

int maxVal(int arr[],int n)
{
    int maxVal = arr[0];
    #pragma omp parallel for reduction(max: maxVal)
    {
        for(int i=0;i<n;i++)
        {
            if(arr[i]>maxVal)
            {
                maxVal=arr[i];
            }
        }
    }
    return maxVal;
}

int sum(int arr[],int n)
{
    int sum=0;
    #pragma omp parallel for reduction(+:sum)
    {
        for(int i=0;i<n;i++)
        {
            sum = sum + arr[i];
        }
    }
    return sum;
}

int average(int arr[], int n)
{
    return (double)sum(arr,n)/n;
}

int main()
{
    cout<<"MIN-MAX-SUM-AVG"<<endl;

    int n;
    cout<<"Enter the number of elements in the array : "<<endl;
    cin>>n;

    int arr[n];
    cout<<"Enter array Elements : "<<endl;
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }

    bool option=true;
    while(option==true)
    {
        cout<<"Choose an option : "<<endl;
        cout<<"1. MIN"<<endl;
        cout<<"2. MAX"<<endl;
        cout<<"3. SUM"<<endl;
        cout<<"4. AVG"<<endl;
        cout<<"5. END"<<endl;
        int choice;
        cin>>choice;

        switch(choice)
        {
            case 1:
                cout<<"Minimum Value : "<<minVal(arr,n)<<endl;
                break;
            case 2:
                cout<<"Maximum Value : "<<maxVal(arr,n)<<endl;
                break;
            case 3:
                cout<<"Sum           : "<<sum(arr,n)<<endl;
                break;
            case 4:
                cout<<"Average       : "<<average(arr,n)<<endl;
                break;
            case 5:
                cout<<"Thank You  "<<endl;
                option=false;
                break;
            default:
                cout<<"Invalid Choice"<<endl;
                break;
        }
    }

}