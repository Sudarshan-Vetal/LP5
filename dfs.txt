#include<iostream>
#include<vector>
#include<queue>
#include<omp.h>
using namespace std;

class Graph{
    int V;
    vector<vector<int>> adj;

    public:
        Graph(int V): V(V), adj(V) {}

        void addEdge(int v, int w)
        {
            adj[v].push_back(w);
        }

        void parallelDFS(int startVertex)
        {
            vector<bool> visited(V, false);
            parallelDFSUtil(startVertex, visited);
        }

        void parallelDFSUtil(int v, vector<bool>& visited)
        {
            visited[v]=true;
            cout<<v<<" ";

            #pragma omp parallel for
            for(int i=0;i<adj[v].size();i++)
            {
                int n = adj[v][i];
                if(!visited[n])
                {
                    parallelDFSUtil(n, visited);
                }
            }
        }

};

int main()
{
    cout<<"PARALLEL DFS USING OpenMP"<<endl;

    int numVertices, numEdges;
    cout<<"Enter the number of Vertices : "<<endl;
    cin>>numVertices;
    cout<<"Enter the number of Edges    : "<<endl;
    cin>>numEdges;

    Graph g(numVertices);

    cout<<"Enter the edges : Source Destination "<<endl;
    for(int i=0; i<numEdges;i++)
    {
        int source,destination;
        cin>>source>>destination;
        g.addEdge(source,destination);
    }

    cout<<"PARALLEL DFS : "<<endl;
    g.parallelDFS(0);
    cout<<endl;

    return 0;
}